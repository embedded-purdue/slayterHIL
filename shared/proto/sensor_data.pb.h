// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_data.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_5fdata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sensor_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sensor_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sensor_5fdata_2eproto;
class AltimeterData;
struct AltimeterDataDefaultTypeInternal;
extern AltimeterDataDefaultTypeInternal _AltimeterData_default_instance_;
class ImuData;
struct ImuDataDefaultTypeInternal;
extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
class SensorPacket;
struct SensorPacketDefaultTypeInternal;
extern SensorPacketDefaultTypeInternal _SensorPacket_default_instance_;
class Vector3D;
struct Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Vector3D final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vector3D) */ {
 public:
  inline Vector3D() : Vector3D(nullptr) {}
  ~Vector3D() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vector3D(::google::protobuf::internal::ConstantInitialized);

  inline Vector3D(const Vector3D& from)
      : Vector3D(nullptr, from) {}
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3D* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector3D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Vector3D& from) {
    Vector3D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Vector3D* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Vector3D";
  }
  protected:
  explicit Vector3D(::google::protobuf::Arena* arena);
  Vector3D(::google::protobuf::Arena* arena, const Vector3D& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:Vector3D)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fdata_2eproto;
};// -------------------------------------------------------------------

class AltimeterData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AltimeterData) */ {
 public:
  inline AltimeterData() : AltimeterData(nullptr) {}
  ~AltimeterData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AltimeterData(::google::protobuf::internal::ConstantInitialized);

  inline AltimeterData(const AltimeterData& from)
      : AltimeterData(nullptr, from) {}
  AltimeterData(AltimeterData&& from) noexcept
    : AltimeterData() {
    *this = ::std::move(from);
  }

  inline AltimeterData& operator=(const AltimeterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AltimeterData& operator=(AltimeterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AltimeterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AltimeterData* internal_default_instance() {
    return reinterpret_cast<const AltimeterData*>(
               &_AltimeterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AltimeterData& a, AltimeterData& b) {
    a.Swap(&b);
  }
  inline void Swap(AltimeterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AltimeterData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AltimeterData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AltimeterData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AltimeterData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AltimeterData& from) {
    AltimeterData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AltimeterData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "AltimeterData";
  }
  protected:
  explicit AltimeterData(::google::protobuf::Arena* arena);
  AltimeterData(::google::protobuf::Arena* arena, const AltimeterData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPressureFieldNumber = 1,
    kAltitudeFieldNumber = 2,
    kTemperatureFieldNumber = 3,
  };
  // float pressure = 1;
  void clear_pressure() ;
  float pressure() const;
  void set_pressure(float value);

  private:
  float _internal_pressure() const;
  void _internal_set_pressure(float value);

  public:
  // float altitude = 2;
  void clear_altitude() ;
  float altitude() const;
  void set_altitude(float value);

  private:
  float _internal_altitude() const;
  void _internal_set_altitude(float value);

  public:
  // float temperature = 3;
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // @@protoc_insertion_point(class_scope:AltimeterData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float pressure_;
    float altitude_;
    float temperature_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fdata_2eproto;
};// -------------------------------------------------------------------

class ImuData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImuData) */ {
 public:
  inline ImuData() : ImuData(nullptr) {}
  ~ImuData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImuData(::google::protobuf::internal::ConstantInitialized);

  inline ImuData(const ImuData& from)
      : ImuData(nullptr, from) {}
  ImuData(ImuData&& from) noexcept
    : ImuData() {
    *this = ::std::move(from);
  }

  inline ImuData& operator=(const ImuData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuData& operator=(ImuData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuData* internal_default_instance() {
    return reinterpret_cast<const ImuData*>(
               &_ImuData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImuData& a, ImuData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImuData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImuData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImuData& from) {
    ImuData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ImuData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ImuData";
  }
  protected:
  explicit ImuData(::google::protobuf::Arena* arena);
  ImuData(::google::protobuf::Arena* arena, const ImuData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationFieldNumber = 1,
    kAngularVelocityFieldNumber = 2,
  };
  // .Vector3D acceleration = 1;
  bool has_acceleration() const;
  void clear_acceleration() ;
  const ::Vector3D& acceleration() const;
  PROTOBUF_NODISCARD ::Vector3D* release_acceleration();
  ::Vector3D* mutable_acceleration();
  void set_allocated_acceleration(::Vector3D* value);
  void unsafe_arena_set_allocated_acceleration(::Vector3D* value);
  ::Vector3D* unsafe_arena_release_acceleration();

  private:
  const ::Vector3D& _internal_acceleration() const;
  ::Vector3D* _internal_mutable_acceleration();

  public:
  // .Vector3D angular_velocity = 2;
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  const ::Vector3D& angular_velocity() const;
  PROTOBUF_NODISCARD ::Vector3D* release_angular_velocity();
  ::Vector3D* mutable_angular_velocity();
  void set_allocated_angular_velocity(::Vector3D* value);
  void unsafe_arena_set_allocated_angular_velocity(::Vector3D* value);
  ::Vector3D* unsafe_arena_release_angular_velocity();

  private:
  const ::Vector3D& _internal_angular_velocity() const;
  ::Vector3D* _internal_mutable_angular_velocity();

  public:
  // @@protoc_insertion_point(class_scope:ImuData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector3D* acceleration_;
    ::Vector3D* angular_velocity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fdata_2eproto;
};// -------------------------------------------------------------------

class SensorPacket final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SensorPacket) */ {
 public:
  inline SensorPacket() : SensorPacket(nullptr) {}
  ~SensorPacket() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SensorPacket(::google::protobuf::internal::ConstantInitialized);

  inline SensorPacket(const SensorPacket& from)
      : SensorPacket(nullptr, from) {}
  SensorPacket(SensorPacket&& from) noexcept
    : SensorPacket() {
    *this = ::std::move(from);
  }

  inline SensorPacket& operator=(const SensorPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorPacket& operator=(SensorPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorPacket* internal_default_instance() {
    return reinterpret_cast<const SensorPacket*>(
               &_SensorPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SensorPacket& a, SensorPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorPacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorPacket* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SensorPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SensorPacket& from) {
    SensorPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SensorPacket* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SensorPacket";
  }
  protected:
  explicit SensorPacket(::google::protobuf::Arena* arena);
  SensorPacket(::google::protobuf::Arena* arena, const SensorPacket& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuDataFieldNumber = 2,
    kAltimeterDataFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // .ImuData imu_data = 2;
  bool has_imu_data() const;
  void clear_imu_data() ;
  const ::ImuData& imu_data() const;
  PROTOBUF_NODISCARD ::ImuData* release_imu_data();
  ::ImuData* mutable_imu_data();
  void set_allocated_imu_data(::ImuData* value);
  void unsafe_arena_set_allocated_imu_data(::ImuData* value);
  ::ImuData* unsafe_arena_release_imu_data();

  private:
  const ::ImuData& _internal_imu_data() const;
  ::ImuData* _internal_mutable_imu_data();

  public:
  // .AltimeterData altimeter_data = 3;
  bool has_altimeter_data() const;
  void clear_altimeter_data() ;
  const ::AltimeterData& altimeter_data() const;
  PROTOBUF_NODISCARD ::AltimeterData* release_altimeter_data();
  ::AltimeterData* mutable_altimeter_data();
  void set_allocated_altimeter_data(::AltimeterData* value);
  void unsafe_arena_set_allocated_altimeter_data(::AltimeterData* value);
  ::AltimeterData* unsafe_arena_release_altimeter_data();

  private:
  const ::AltimeterData& _internal_altimeter_data() const;
  ::AltimeterData* _internal_mutable_altimeter_data();

  public:
  // uint32 timestamp = 1;
  void clear_timestamp() ;
  ::uint32_t timestamp() const;
  void set_timestamp(::uint32_t value);

  private:
  ::uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:SensorPacket)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::ImuData* imu_data_;
    ::AltimeterData* altimeter_data_;
    ::uint32_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:Vector3D.x)
  return _internal_x();
}
inline void Vector3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector3D.x)
}
inline float Vector3D::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Vector3D::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// float y = 2;
inline void Vector3D::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:Vector3D.y)
  return _internal_y();
}
inline void Vector3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector3D.y)
}
inline float Vector3D::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Vector3D::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// float z = 3;
inline void Vector3D::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:Vector3D.z)
  return _internal_z();
}
inline void Vector3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Vector3D.z)
}
inline float Vector3D::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Vector3D::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// ImuData

// .Vector3D acceleration = 1;
inline bool ImuData::has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline void ImuData::clear_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Vector3D& ImuData::_internal_acceleration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Vector3D* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3D&>(::_Vector3D_default_instance_);
}
inline const ::Vector3D& ImuData::acceleration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ImuData.acceleration)
  return _internal_acceleration();
}
inline void ImuData::unsafe_arena_set_allocated_acceleration(::Vector3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = reinterpret_cast<::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ImuData.acceleration)
}
inline ::Vector3D* ImuData::release_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3D* released = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector3D* ImuData::unsafe_arena_release_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ImuData.acceleration)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3D* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::Vector3D* ImuData::_internal_mutable_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3D>(GetArena());
    _impl_.acceleration_ = reinterpret_cast<::Vector3D*>(p);
  }
  return _impl_.acceleration_;
}
inline ::Vector3D* ImuData::mutable_acceleration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Vector3D* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:ImuData.acceleration)
  return _msg;
}
inline void ImuData::set_allocated_acceleration(::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Vector3D*>(_impl_.acceleration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::Vector3D*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.acceleration_ = reinterpret_cast<::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:ImuData.acceleration)
}

// .Vector3D angular_velocity = 2;
inline bool ImuData::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_ != nullptr);
  return value;
}
inline void ImuData::clear_angular_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector3D& ImuData::_internal_angular_velocity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Vector3D* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3D&>(::_Vector3D_default_instance_);
}
inline const ::Vector3D& ImuData::angular_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ImuData.angular_velocity)
  return _internal_angular_velocity();
}
inline void ImuData::unsafe_arena_set_allocated_angular_velocity(::Vector3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = reinterpret_cast<::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ImuData.angular_velocity)
}
inline ::Vector3D* ImuData::release_angular_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3D* released = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector3D* ImuData::unsafe_arena_release_angular_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ImuData.angular_velocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3D* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::Vector3D* ImuData::_internal_mutable_angular_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3D>(GetArena());
    _impl_.angular_velocity_ = reinterpret_cast<::Vector3D*>(p);
  }
  return _impl_.angular_velocity_;
}
inline ::Vector3D* ImuData::mutable_angular_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Vector3D* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:ImuData.angular_velocity)
  return _msg;
}
inline void ImuData::set_allocated_angular_velocity(::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Vector3D*>(_impl_.angular_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::Vector3D*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.angular_velocity_ = reinterpret_cast<::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:ImuData.angular_velocity)
}

// -------------------------------------------------------------------

// AltimeterData

// float pressure = 1;
inline void AltimeterData::clear_pressure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pressure_ = 0;
}
inline float AltimeterData::pressure() const {
  // @@protoc_insertion_point(field_get:AltimeterData.pressure)
  return _internal_pressure();
}
inline void AltimeterData::set_pressure(float value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:AltimeterData.pressure)
}
inline float AltimeterData::_internal_pressure() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pressure_;
}
inline void AltimeterData::_internal_set_pressure(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pressure_ = value;
}

// float altitude = 2;
inline void AltimeterData::clear_altitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.altitude_ = 0;
}
inline float AltimeterData::altitude() const {
  // @@protoc_insertion_point(field_get:AltimeterData.altitude)
  return _internal_altitude();
}
inline void AltimeterData::set_altitude(float value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:AltimeterData.altitude)
}
inline float AltimeterData::_internal_altitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.altitude_;
}
inline void AltimeterData::_internal_set_altitude(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.altitude_ = value;
}

// float temperature = 3;
inline void AltimeterData::clear_temperature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.temperature_ = 0;
}
inline float AltimeterData::temperature() const {
  // @@protoc_insertion_point(field_get:AltimeterData.temperature)
  return _internal_temperature();
}
inline void AltimeterData::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:AltimeterData.temperature)
}
inline float AltimeterData::_internal_temperature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.temperature_;
}
inline void AltimeterData::_internal_set_temperature(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.temperature_ = value;
}

// -------------------------------------------------------------------

// SensorPacket

// uint32 timestamp = 1;
inline void SensorPacket::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = 0u;
}
inline ::uint32_t SensorPacket::timestamp() const {
  // @@protoc_insertion_point(field_get:SensorPacket.timestamp)
  return _internal_timestamp();
}
inline void SensorPacket::set_timestamp(::uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:SensorPacket.timestamp)
}
inline ::uint32_t SensorPacket::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void SensorPacket::_internal_set_timestamp(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// .ImuData imu_data = 2;
inline bool SensorPacket::has_imu_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.imu_data_ != nullptr);
  return value;
}
inline void SensorPacket::clear_imu_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.imu_data_ != nullptr) _impl_.imu_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ImuData& SensorPacket::_internal_imu_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ImuData* p = _impl_.imu_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::ImuData&>(::_ImuData_default_instance_);
}
inline const ::ImuData& SensorPacket::imu_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SensorPacket.imu_data)
  return _internal_imu_data();
}
inline void SensorPacket::unsafe_arena_set_allocated_imu_data(::ImuData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.imu_data_);
  }
  _impl_.imu_data_ = reinterpret_cast<::ImuData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SensorPacket.imu_data)
}
inline ::ImuData* SensorPacket::release_imu_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ImuData* released = _impl_.imu_data_;
  _impl_.imu_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ImuData* SensorPacket::unsafe_arena_release_imu_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SensorPacket.imu_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ImuData* temp = _impl_.imu_data_;
  _impl_.imu_data_ = nullptr;
  return temp;
}
inline ::ImuData* SensorPacket::_internal_mutable_imu_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.imu_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::ImuData>(GetArena());
    _impl_.imu_data_ = reinterpret_cast<::ImuData*>(p);
  }
  return _impl_.imu_data_;
}
inline ::ImuData* SensorPacket::mutable_imu_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ImuData* _msg = _internal_mutable_imu_data();
  // @@protoc_insertion_point(field_mutable:SensorPacket.imu_data)
  return _msg;
}
inline void SensorPacket::set_allocated_imu_data(::ImuData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ImuData*>(_impl_.imu_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ImuData*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.imu_data_ = reinterpret_cast<::ImuData*>(value);
  // @@protoc_insertion_point(field_set_allocated:SensorPacket.imu_data)
}

// .AltimeterData altimeter_data = 3;
inline bool SensorPacket::has_altimeter_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.altimeter_data_ != nullptr);
  return value;
}
inline void SensorPacket::clear_altimeter_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.altimeter_data_ != nullptr) _impl_.altimeter_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::AltimeterData& SensorPacket::_internal_altimeter_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::AltimeterData* p = _impl_.altimeter_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::AltimeterData&>(::_AltimeterData_default_instance_);
}
inline const ::AltimeterData& SensorPacket::altimeter_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SensorPacket.altimeter_data)
  return _internal_altimeter_data();
}
inline void SensorPacket::unsafe_arena_set_allocated_altimeter_data(::AltimeterData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.altimeter_data_);
  }
  _impl_.altimeter_data_ = reinterpret_cast<::AltimeterData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SensorPacket.altimeter_data)
}
inline ::AltimeterData* SensorPacket::release_altimeter_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::AltimeterData* released = _impl_.altimeter_data_;
  _impl_.altimeter_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::AltimeterData* SensorPacket::unsafe_arena_release_altimeter_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SensorPacket.altimeter_data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::AltimeterData* temp = _impl_.altimeter_data_;
  _impl_.altimeter_data_ = nullptr;
  return temp;
}
inline ::AltimeterData* SensorPacket::_internal_mutable_altimeter_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.altimeter_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::AltimeterData>(GetArena());
    _impl_.altimeter_data_ = reinterpret_cast<::AltimeterData*>(p);
  }
  return _impl_.altimeter_data_;
}
inline ::AltimeterData* SensorPacket::mutable_altimeter_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::AltimeterData* _msg = _internal_mutable_altimeter_data();
  // @@protoc_insertion_point(field_mutable:SensorPacket.altimeter_data)
  return _msg;
}
inline void SensorPacket::set_allocated_altimeter_data(::AltimeterData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::AltimeterData*>(_impl_.altimeter_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::AltimeterData*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.altimeter_data_ = reinterpret_cast<::AltimeterData*>(value);
  // @@protoc_insertion_point(field_set_allocated:SensorPacket.altimeter_data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sensor_5fdata_2eproto_2epb_2eh
