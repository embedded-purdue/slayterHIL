// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_data.proto

#include "sensor_data.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Vector3D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vector3D::Vector3D(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Vector3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DDefaultTypeInternal() {}
  union {
    Vector3D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DDefaultTypeInternal _Vector3D_default_instance_;

inline constexpr AltimeterData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pressure_{0},
        altitude_{0},
        temperature_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AltimeterData::AltimeterData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AltimeterDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AltimeterDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AltimeterDataDefaultTypeInternal() {}
  union {
    AltimeterData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AltimeterDataDefaultTypeInternal _AltimeterData_default_instance_;

inline constexpr ImuData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        acceleration_{nullptr},
        angular_velocity_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ImuData::ImuData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ImuDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuDataDefaultTypeInternal() {}
  union {
    ImuData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuDataDefaultTypeInternal _ImuData_default_instance_;

inline constexpr SensorPacket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        imu_data_{nullptr},
        altimeter_data_{nullptr},
        timestamp_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR SensorPacket::SensorPacket(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SensorPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorPacketDefaultTypeInternal() {}
  union {
    SensorPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorPacketDefaultTypeInternal _SensorPacket_default_instance_;
static ::_pb::Metadata file_level_metadata_sensor_5fdata_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sensor_5fdata_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sensor_5fdata_2eproto = nullptr;
const ::uint32_t TableStruct_sensor_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Vector3D, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Vector3D, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::Vector3D, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::Vector3D, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::ImuData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ImuData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ImuData, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::ImuData, _impl_.angular_velocity_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::AltimeterData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::AltimeterData, _impl_.pressure_),
    PROTOBUF_FIELD_OFFSET(::AltimeterData, _impl_.altitude_),
    PROTOBUF_FIELD_OFFSET(::AltimeterData, _impl_.temperature_),
    PROTOBUF_FIELD_OFFSET(::SensorPacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::SensorPacket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SensorPacket, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::SensorPacket, _impl_.imu_data_),
    PROTOBUF_FIELD_OFFSET(::SensorPacket, _impl_.altimeter_data_),
    ~0u,
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Vector3D)},
        {11, 21, -1, sizeof(::ImuData)},
        {23, -1, -1, sizeof(::AltimeterData)},
        {34, 45, -1, sizeof(::SensorPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_Vector3D_default_instance_._instance,
    &::_ImuData_default_instance_._instance,
    &::_AltimeterData_default_instance_._instance,
    &::_SensorPacket_default_instance_._instance,
};
const char descriptor_table_protodef_sensor_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021sensor_data.proto\"+\n\010Vector3D\022\t\n\001x\030\001 \001"
    "(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"O\n\007ImuData\022\037\n\014a"
    "cceleration\030\001 \001(\0132\t.Vector3D\022#\n\020angular_"
    "velocity\030\002 \001(\0132\t.Vector3D\"H\n\rAltimeterDa"
    "ta\022\020\n\010pressure\030\001 \001(\002\022\020\n\010altitude\030\002 \001(\002\022\023"
    "\n\013temperature\030\003 \001(\002\"e\n\014SensorPacket\022\021\n\tt"
    "imestamp\030\001 \001(\r\022\032\n\010imu_data\030\002 \001(\0132\010.ImuDa"
    "ta\022&\n\016altimeter_data\030\003 \001(\0132\016.AltimeterDa"
    "tab\006proto3"
};
static ::absl::once_flag descriptor_table_sensor_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensor_5fdata_2eproto = {
    false,
    false,
    330,
    descriptor_table_protodef_sensor_5fdata_2eproto,
    "sensor_data.proto",
    &descriptor_table_sensor_5fdata_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_sensor_5fdata_2eproto::offsets,
    file_level_metadata_sensor_5fdata_2eproto,
    file_level_enum_descriptors_sensor_5fdata_2eproto,
    file_level_service_descriptors_sensor_5fdata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensor_5fdata_2eproto_getter() {
  return &descriptor_table_sensor_5fdata_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensor_5fdata_2eproto(&descriptor_table_sensor_5fdata_2eproto);
// ===================================================================

class Vector3D::_Internal {
 public:
};

Vector3D::Vector3D(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Vector3D)
}
Vector3D::Vector3D(
    ::google::protobuf::Arena* arena, const Vector3D& from)
    : Vector3D(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Vector3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Vector3D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:Vector3D)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Vector3D::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector3D)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Vector3D::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Vector3D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Vector3D_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Vector3D::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector3D)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector3D)
  return target;
}

::size_t Vector3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector3D)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Vector3D::_class_data_ = {
    Vector3D::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Vector3D::GetClassData() const {
  return &_class_data_;
}

void Vector3D::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Vector3D*>(&to_msg);
  auto& from = static_cast<const Vector3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vector3D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Vector3D::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Vector3D::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Vector3D::InternalSwap(Vector3D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.z_)
      + sizeof(Vector3D::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Vector3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[0]);
}
// ===================================================================

class ImuData::_Internal {
 public:
  using HasBits = decltype(std::declval<ImuData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ImuData, _impl_._has_bits_);
  static const ::Vector3D& acceleration(const ImuData* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector3D& angular_velocity(const ImuData* msg);
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Vector3D& ImuData::_Internal::acceleration(const ImuData* msg) {
  return *msg->_impl_.acceleration_;
}
const ::Vector3D& ImuData::_Internal::angular_velocity(const ImuData* msg) {
  return *msg->_impl_.angular_velocity_;
}
ImuData::ImuData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ImuData)
}
inline PROTOBUF_NDEBUG_INLINE ImuData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ImuData::ImuData(
    ::google::protobuf::Arena* arena,
    const ImuData& from)
    : ::google::protobuf::Message(arena) {
  ImuData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.acceleration_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::Vector3D>(arena, *from._impl_.acceleration_)
                : nullptr;
  _impl_.angular_velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::Vector3D>(arena, *from._impl_.angular_velocity_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:ImuData)
}
inline PROTOBUF_NDEBUG_INLINE ImuData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ImuData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, acceleration_),
           0,
           offsetof(Impl_, angular_velocity_) -
               offsetof(Impl_, acceleration_) +
               sizeof(Impl_::angular_velocity_));
}
ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:ImuData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ImuData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.acceleration_;
  delete _impl_.angular_velocity_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:ImuData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ImuData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> ImuData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImuData, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ImuData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Vector3D angular_velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ImuData, _impl_.angular_velocity_)}},
    // .Vector3D acceleration = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ImuData, _impl_.acceleration_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Vector3D acceleration = 1;
    {PROTOBUF_FIELD_OFFSET(ImuData, _impl_.acceleration_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Vector3D angular_velocity = 2;
    {PROTOBUF_FIELD_OFFSET(ImuData, _impl_.angular_velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector3D>()},
    {::_pbi::TcParser::GetTable<::Vector3D>()},
  }}, {{
  }},
};

::uint8_t* ImuData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImuData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Vector3D acceleration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // .Vector3D angular_velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImuData)
  return target;
}

::size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImuData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .Vector3D acceleration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.acceleration_);
    }

    // .Vector3D angular_velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.angular_velocity_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ImuData::_class_data_ = {
    ImuData::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ImuData::GetClassData() const {
  return &_class_data_;
}

void ImuData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ImuData*>(&to_msg);
  auto& from = static_cast<const ImuData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ImuData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_acceleration()->::Vector3D::MergeFrom(
          from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_angular_velocity()->::Vector3D::MergeFrom(
          from._internal_angular_velocity());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImuData::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ImuData::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ImuData::InternalSwap(ImuData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuData, _impl_.angular_velocity_)
      + sizeof(ImuData::_impl_.angular_velocity_)
      - PROTOBUF_FIELD_OFFSET(ImuData, _impl_.acceleration_)>(
          reinterpret_cast<char*>(&_impl_.acceleration_),
          reinterpret_cast<char*>(&other->_impl_.acceleration_));
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[1]);
}
// ===================================================================

class AltimeterData::_Internal {
 public:
};

AltimeterData::AltimeterData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:AltimeterData)
}
AltimeterData::AltimeterData(
    ::google::protobuf::Arena* arena, const AltimeterData& from)
    : AltimeterData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AltimeterData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AltimeterData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pressure_),
           0,
           offsetof(Impl_, temperature_) -
               offsetof(Impl_, pressure_) +
               sizeof(Impl_::temperature_));
}
AltimeterData::~AltimeterData() {
  // @@protoc_insertion_point(destructor:AltimeterData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AltimeterData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AltimeterData::Clear() {
// @@protoc_insertion_point(message_clear_start:AltimeterData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pressure_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.temperature_) -
      reinterpret_cast<char*>(&_impl_.pressure_)) + sizeof(_impl_.temperature_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AltimeterData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AltimeterData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AltimeterData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float pressure = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AltimeterData, _impl_.pressure_)}},
    // float altitude = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AltimeterData, _impl_.altitude_)}},
    // float temperature = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AltimeterData, _impl_.temperature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float pressure = 1;
    {PROTOBUF_FIELD_OFFSET(AltimeterData, _impl_.pressure_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float altitude = 2;
    {PROTOBUF_FIELD_OFFSET(AltimeterData, _impl_.altitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float temperature = 3;
    {PROTOBUF_FIELD_OFFSET(AltimeterData, _impl_.temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AltimeterData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AltimeterData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float pressure = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pressure = this->_internal_pressure();
  ::uint32_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_pressure(), target);
  }

  // float altitude = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  ::uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_altitude(), target);
  }

  // float temperature = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  ::uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AltimeterData)
  return target;
}

::size_t AltimeterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AltimeterData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pressure = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pressure = this->_internal_pressure();
  ::uint32_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    total_size += 5;
  }

  // float altitude = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  ::uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 5;
  }

  // float temperature = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  ::uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AltimeterData::_class_data_ = {
    AltimeterData::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AltimeterData::GetClassData() const {
  return &_class_data_;
}

void AltimeterData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AltimeterData*>(&to_msg);
  auto& from = static_cast<const AltimeterData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AltimeterData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pressure = from._internal_pressure();
  ::uint32_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    _this->_internal_set_pressure(from._internal_pressure());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude = from._internal_altitude();
  ::uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _this->_internal_set_altitude(from._internal_altitude());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  ::uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AltimeterData::CopyFrom(const AltimeterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AltimeterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AltimeterData::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AltimeterData::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AltimeterData::InternalSwap(AltimeterData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AltimeterData, _impl_.temperature_)
      + sizeof(AltimeterData::_impl_.temperature_)
      - PROTOBUF_FIELD_OFFSET(AltimeterData, _impl_.pressure_)>(
          reinterpret_cast<char*>(&_impl_.pressure_),
          reinterpret_cast<char*>(&other->_impl_.pressure_));
}

::google::protobuf::Metadata AltimeterData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[2]);
}
// ===================================================================

class SensorPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_._has_bits_);
  static const ::ImuData& imu_data(const SensorPacket* msg);
  static void set_has_imu_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::AltimeterData& altimeter_data(const SensorPacket* msg);
  static void set_has_altimeter_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ImuData& SensorPacket::_Internal::imu_data(const SensorPacket* msg) {
  return *msg->_impl_.imu_data_;
}
const ::AltimeterData& SensorPacket::_Internal::altimeter_data(const SensorPacket* msg) {
  return *msg->_impl_.altimeter_data_;
}
SensorPacket::SensorPacket(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SensorPacket)
}
inline PROTOBUF_NDEBUG_INLINE SensorPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SensorPacket::SensorPacket(
    ::google::protobuf::Arena* arena,
    const SensorPacket& from)
    : ::google::protobuf::Message(arena) {
  SensorPacket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.imu_data_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::ImuData>(arena, *from._impl_.imu_data_)
                : nullptr;
  _impl_.altimeter_data_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::AltimeterData>(arena, *from._impl_.altimeter_data_)
                : nullptr;
  _impl_.timestamp_ = from._impl_.timestamp_;

  // @@protoc_insertion_point(copy_constructor:SensorPacket)
}
inline PROTOBUF_NDEBUG_INLINE SensorPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SensorPacket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, imu_data_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, imu_data_) +
               sizeof(Impl_::timestamp_));
}
SensorPacket::~SensorPacket() {
  // @@protoc_insertion_point(destructor:SensorPacket)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SensorPacket::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.imu_data_;
  delete _impl_.altimeter_data_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SensorPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorPacket)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.imu_data_ != nullptr);
      _impl_.imu_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.altimeter_data_ != nullptr);
      _impl_.altimeter_data_->Clear();
    }
  }
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SensorPacket::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> SensorPacket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SensorPacket_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 timestamp = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SensorPacket, _impl_.timestamp_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_.timestamp_)}},
    // .ImuData imu_data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_.imu_data_)}},
    // .AltimeterData altimeter_data = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_.altimeter_data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .ImuData imu_data = 2;
    {PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_.imu_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .AltimeterData altimeter_data = 3;
    {PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_.altimeter_data_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ImuData>()},
    {::_pbi::TcParser::GetTable<::AltimeterData>()},
  }}, {{
  }},
};

::uint8_t* SensorPacket::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorPacket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_timestamp(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ImuData imu_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::imu_data(this),
        _Internal::imu_data(this).GetCachedSize(), target, stream);
  }

  // .AltimeterData altimeter_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::altimeter_data(this),
        _Internal::altimeter_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorPacket)
  return target;
}

::size_t SensorPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ImuData imu_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.imu_data_);
    }

    // .AltimeterData altimeter_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.altimeter_data_);
    }

  }
  // uint32 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SensorPacket::_class_data_ = {
    SensorPacket::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SensorPacket::GetClassData() const {
  return &_class_data_;
}

void SensorPacket::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SensorPacket*>(&to_msg);
  auto& from = static_cast<const SensorPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SensorPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_imu_data()->::ImuData::MergeFrom(
          from._internal_imu_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_altimeter_data()->::AltimeterData::MergeFrom(
          from._internal_altimeter_data());
    }
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SensorPacket::CopyFrom(const SensorPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SensorPacket::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SensorPacket::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SensorPacket::InternalSwap(SensorPacket* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_.timestamp_)
      + sizeof(SensorPacket::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(SensorPacket, _impl_.imu_data_)>(
          reinterpret_cast<char*>(&_impl_.imu_data_),
          reinterpret_cast<char*>(&other->_impl_.imu_data_));
}

::google::protobuf::Metadata SensorPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
